
- name: preliminary login information with account that can see everything
  raw: "oc login -u developer -p asd && oc project {{ namespace }}"

- name: list service instances
  raw: oc get serviceinstances -o json
  register: serviceinstances

  # We need to rename the returned item as a generic list since oc is returning a
  #   reserved key of 'items'
- set_fact:
    services_all: "{{ (serviceinstances.stdout | from_json)['items'] }}"

- name: "get serviceclass labels for {{ _apb_service_class_id }}"
  raw: "oc get clusterserviceclass {{ _apb_service_class_id }} -o json"
  register: serviceclass

- debug: msg="Services All {{ services_all }}"

- debug: msg="Service Class {{ serviceclass.stdout }}"

- name: "pull username from service instance id {{ _apb_service_instance_id }}"
  with_items: "{{ services_all }}"
  set_fact:
    username: "{{ item.spec.userInfo.username }}"
    project: "{{ item.metadata.namespace }}"
  when: item.spec.externalID == _apb_service_instance_id

- debug: msg="Username- {{ username }} Project - {{ project }}"

- name: "dump oc project {{ project }}"
  raw: "oc get project {{ project }} -o json"
  register: project_json

- name: "dump oc user {{ username }}"
  raw: "oc get user {{ username }} -o json"
  register: username_json

- set_fact:
    service_class_labels: "{{ (serviceclass.stdout | from_json).metadata.labels | default('No Labels') }}"
    project_labels: "{{ (project_json.stdout | from_json).metadata.labels | default('No Labels') }}"
    username_labels: "{{ (username_json.stdout | from_json).metadata.labels | default('No Labels') }}"
    username_name: "{{ (username_json.stdout | from_json).metadata.name | default('No Name') }}"
    service_class_name: "{{ (serviceclass.stdout | from_json).spec.externalMetadata.displayName | default('No Name') }}"

- debug: msg="Service Class Labels for {{ (serviceclass.stdout | from_json).metadata.name}} {{ service_class_labels }}"
- debug: msg="Project Labels for {{ (project_json.stdout | from_json).metadata.name }} {{ project_labels }}"
- debug: msg="Username Labels for {{ (username_json.stdout | from_json).metadata.name}} {{ username_labels }}"
- debug: msg="Username Name for {{ (username_json.stdout | from_json).metadata.name}} {{ username_name }}"
- debug: msg="Service Class Name for {{ (serviceclass.stdout | from_json).metadata.name}} {{ service_class_name }}"

- set_fact:
    requested_cpus: "{{ (option_0_number_of_sockets|default(0)|int)*(option_0_cores_per_socket|default(0)|int) }}"
    requested_memory_gb: "{{ (option_0_number_of_vms|default(0)|int)*(option_0_vm_memory|default(0)|int) }}"
    requested_storage_gb: "{{ (option_0_number_of_vms|default(0)|int)*(provisioned_storage|default(0)|int) }}"
    requested_vms: "{{ (option_0_number_of_vms|default(0)|int) }}"
    requested_budget: "{{ (plan_cost|default(0.0)|float) }}"

- name: Fetch the BPMS credentials
  k8s_v1_secret:
    namespace: "{{ namespace }}"
    name: bpm
  register: bpm_cred

- name: Fetch the Quota Config Map
  k8s_v1_config_map:
    namespace: "{{ namespace }}"
    name: redhat-quota
  register: redhat_quota
- debug: var=redhat_quota
- set_fact:
    quota: "{{ redhat_quota.config_map.data.quota | from_yaml }}"
- debug: var=quota

- name: Fetch the Approval Config Map
  k8s_v1_config_map:
    namespace: "{{ namespace }}"
    name: redhat-approval
  register: redhat_approval
- debug: var=redhat_approval
- set_fact:
    approval: "{{ redhat_approval.config_map.data.approval | from_yaml }}"
- debug: var=approval

- name: Fetch the Settings Config Map
  k8s_v1_config_map:
    namespace: "{{ namespace }}"
    name: redhat-settings
  register: redhat_settings
- debug: var=redhat_settings
- set_fact:
    settings: "{{ redhat_settings.config_map.data.settings | from_yaml }}"
- debug: var=settings

- name: Build Extra Info Dictionary
  set_fact: 
    extra_info:
      user_label: "{{ username_labels.permissions|default('no_label') }}"
      project_label: "{{ project_labels.permissions|default('no_label') }}"
      service_label: "{{ service_class_labels.permissions|default('no_label')}}"
      requester: "{{ (username_json.stdout | from_json).metadata.name }}"
      plan_id: "{{_apb_plan_id}}"
      requested_cpus: "{{ requested_cpus }}"
      requested_vms: "{{ requested_vms }}"
      requested_memory_gb: "{{ requested_memory_gb }}"
      requested_budget: "{{ requested_budget }}"
      requested_storage_gb: "{{ requested_storage_gb }}"
      service_name: "{{ manageiq.service_name }}"

- name: Build the payload to be sent to BPMS
  set_fact: 
    bpm_dict: "{{ approval|combine(quota)|combine(extra_info) }}"

- debug: var=bpm_dict

- name: Save the new config
  k8s_v1_config_map:
    namespace: "{{ namespace }}"
    name: "{{_apb_service_instance_id }}-status"
    data:
      status: "{{ bpm_dict | to_nice_yaml }}"

- name: POST the Approval and Quota BPM engine with this service
  uri:
    url: "{{ settings.bpm_url }}/{{ settings.bpm_post_path }}"
    user: "{{ bpm_cred.secret.data.username | b64decode }}"
    password: "{{ bpm_cred.secret.data.password | b64decode }}"
    force_basic_auth: yes
    method: POST
    validate_certs: False
    headers:
      X-KIE-ContentType: "JSON"
      Content-Type: "application/json"
      Accept: "application/json"
    body_format: json
    status_code: 201
    body:
      '{{ bpm_dict }}'
    return_content: yes
  register: rule_instance

- debug: msg="Rule instance {{ rule_instance }}"

- name: Monitor BPM and update the config map periodically 
  bpm_monitor: 
    namespace: "{{ namespace }}" 
    name: "{{_apb_service_instance_id }}-status" 
    retries: "{{ settings.max_retries }}"
    delay: "{{ settings.retry_interval }}"
    uri:
      url: "{{ settings.bpm_url }}/{{ settings.bpm_get_path }}/{{ rule_instance.content }}?withVars=true"
      method: GET
      user: "{{ bpm_cred.secret.data.username | b64decode }}"
      password: "{{ bpm_cred.secret.data.password | b64decode }}"
      force_basic_auth: yes
      validate_certs: False
      headers:
        X-KIE-ContentType: "JSON"
        Content-Type: "application/json"
        Accept: "application/json"
      body_format: json
      status_code: 200
  register: result

- debug: var=result

- name: Create the Updated Quota after approval has been granted
  set_fact:
    updated_quota: 
      {
        'allocated_budget': "{{ quota.allocated_budget }}",
        'allocated_cpus': "{{ quota.allocated_cpus }}",
        'allocated_memory_gb': "{{ quota.allocated_memory_gb }}",
        'allocated_storage_gb': "{{ quota.allocated_storage_gb }}",
        'allocated_vms': "{{ quota.allocated_vms }}",
        'used_budget' : "{{ (quota.used_budget|float + requested_budget|float) | float }}",
        'used_cpus': "{{ (quota.used_cpus|int + requested_cpus|int) | int }}",
        'used_memory_gb' : "{{ (quota.used_memory_gb|int + requested_memory_gb|int) | int }}",
        'used_storage_gb' : "{{ (quota.used_storage_gb|int + requested_storage_gb|int) | int }}",
        'used_vms' : "{{ (quota.used_vms|int + requested_vms|int) | int }}"
      }

- name: Save the updated quota
  k8s_v1_config_map:
    namespace: "{{ namespace }}"
    name: redhat-quota
    data:
      quota: "{{ updated_quota | to_nice_yaml }}"
